/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package practica_final;

import java.awt.image.BufferedImage;
import java.io.File;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;

/**
 * Clase de Ventana Interna Video que se utilizara para mostrar videos
 *
 * @author Cesar Muñoz Reinoso
 */
public class VentanaInternaVideo extends VentanaInternaSM {

    /**
     * Reproductor de video
     */
    private EmbeddedMediaPlayer vlcplayer;

    /**
     * Archivo de video
     */
    private File fMedia;

    /**
     * Constructor de Ventana interna video
     */
    public VentanaInternaVideo() {
        super();
        this.vlcplayer = null;
        initComponents();
    }

    /**
     * Constructor de Ventana interna Video en el que añadimos un video
     *
     * @param f archivo de video
     */
    private VentanaInternaVideo(File f) {
        super();
        this.vlcplayer = null;
        initComponents();
        fMedia = f;
        EmbeddedMediaPlayerComponent aVisual = new EmbeddedMediaPlayerComponent();
        getContentPane().add(aVisual, java.awt.BorderLayout.CENTER);
        vlcplayer = aVisual.getMediaPlayer();
    }

    /**
     * Devuelve la instancia del reproductor de video
     *
     * @param f
     * @return
     */
    public static VentanaInternaVideo getInstance(File f) {
        VentanaInternaVideo v = new VentanaInternaVideo(f);
        return (v.vlcplayer != null ? v : null);
    }

    /**
     * Reproduce el video
     *
     */
    public void play() {
        if (vlcplayer != null) {
            if (vlcplayer.isPlayable()) {
                vlcplayer.play();
            } else {
                vlcplayer.playMedia(fMedia.getAbsolutePath());
            }
        }
    }

    /**
     * Para el video
     *
     */
    public void stop() {
        if (vlcplayer != null) {
            if (vlcplayer.isPlaying()) {
                vlcplayer.pause();
            } else {
                vlcplayer.stop();
            }
        }
    }

    /**
     * Añade el listener de video
     *
     * @param ml
     */
    public void addMediaPlayerEventListener(MediaPlayerEventListener ml) {
        if (vlcplayer != null) {
            vlcplayer.addMediaPlayerEventListener(ml);
        }
    }

    /**
     * Devuelve la imagen de la ventana, en ese caso una captura del video
     *
     */
    @Override
    public BufferedImage getImagen() {
        return vlcplayer != null ? vlcplayer.getSnapshot() : null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(350, 300));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Para el reproductor y lo iguala a null cuando se cierra la Ventana interna
     *
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if (vlcplayer != null) {
            vlcplayer.stop();
            vlcplayer = null;
        }
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
