/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica_final;

import java.awt.AlphaComposite;
import sm.cmr.graficos.Herramienta;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import sm.cmr.eventos.LienzoAdapter;
import sm.cmr.eventos.LienzoEvent;
import sm.cmr.graficos.FormasSM;
import sm.cmr.imagen.CambiarTonoOp;
import sm.cmr.imagen.OperadorOpPropia;
import sm.cmr.imagen.PosterizarOp;
import sm.cmr.imagen.RojoOp;
import sm.cmr.iu.Lienzo2D;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;

/**
 * Clase de Ventana Principal en la que implementaremos toda la interfaz gráfica
 * del sistema
 *
 * @author Cesar Muñoz Reinoso
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Imagen fuente, utilizada para almacenar la imagen original al aplicar un
     * filtro
     */
    private BufferedImage imgFuente = null;

    /**
     * Grabador de audio
     */
    private SMClipPlayer player = null;

    /**
     * Reproductor de audio
     */
    private SMSoundRecorder recorder = null;

    /**
     * Constructor de Ventana Princpal
     */
    public VentanaPrincipal() {
        initComponents();
        ListaFiguras.setModel(new DefaultListModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Herramientas = new javax.swing.ButtonGroup();
        BarraHerramientas = new javax.swing.JToolBar();
        Nuevo = new javax.swing.JButton();
        Abrir = new javax.swing.JButton();
        Guardar = new javax.swing.JButton();
        Separador1 = new javax.swing.JToolBar.Separator();
        Trazo = new javax.swing.JToggleButton();
        Linea = new javax.swing.JToggleButton();
        Rectangulo = new javax.swing.JToggleButton();
        Elipse = new javax.swing.JToggleButton();
        Curva = new javax.swing.JToggleButton();
        Smile = new javax.swing.JToggleButton();
        Mover = new javax.swing.JToggleButton();
        Separador3 = new javax.swing.JToolBar.Separator();
        PanelColores = new javax.swing.JPanel();
        Negro = new javax.swing.JButton();
        Rojo = new javax.swing.JButton();
        Amarillo = new javax.swing.JButton();
        Verde = new javax.swing.JButton();
        Azul = new javax.swing.JButton();
        EligeColor = new javax.swing.JButton();
        Separador2 = new javax.swing.JToolBar.Separator();
        Rellenar = new javax.swing.JToggleButton();
        Transparente = new javax.swing.JToggleButton();
        Alisar = new javax.swing.JToggleButton();
        valor_grosor = new javax.swing.JSpinner();
        Discontinua = new javax.swing.JToggleButton();
        botonWebcam = new javax.swing.JButton();
        botonCaptura = new javax.swing.JButton();
        Play = new javax.swing.JButton();
        Stop = new javax.swing.JButton();
        Rec = new javax.swing.JButton();
        listaReproduccion = new javax.swing.JComboBox<>();
        BarraInferior = new javax.swing.JPanel();
        BarraEstado = new javax.swing.JLabel();
        panelImagenOp = new javax.swing.JPanel();
        panelDuplicado = new javax.swing.JPanel();
        Duplicado = new javax.swing.JButton();
        panelBrillo = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        sliderContraste = new javax.swing.JSlider();
        panelFiltros = new javax.swing.JPanel();
        seleccionMascara = new javax.swing.JComboBox<>();
        panelTransformaciones = new javax.swing.JPanel();
        ContrasteNormal = new javax.swing.JButton();
        ContrasteIIluminacion = new javax.swing.JButton();
        ContrasteOscuro = new javax.swing.JButton();
        Negativo = new javax.swing.JButton();
        Cuadratica = new javax.swing.JButton();
        Lineal = new javax.swing.JButton();
        abValores = new javax.swing.JPanel();
        aValor = new javax.swing.JSlider();
        bValor = new javax.swing.JSlider();
        panelRotacionEscalado = new javax.swing.JPanel();
        Rotacion180 = new javax.swing.JButton();
        Aumentar = new javax.swing.JButton();
        Disminuir = new javax.swing.JButton();
        sliderRotacion = new javax.swing.JSlider();
        panelColor = new javax.swing.JPanel();
        ExtraerBandas = new javax.swing.JButton();
        seleccionEspaciosColor = new javax.swing.JComboBox<>();
        panelColor1 = new javax.swing.JPanel();
        CombinarBandas = new javax.swing.JButton();
        Sepia = new javax.swing.JButton();
        Tintar = new javax.swing.JButton();
        Ecualizar = new javax.swing.JButton();
        RojoButton = new javax.swing.JButton();
        sliderPosterize = new javax.swing.JSlider();
        sliderTono = new javax.swing.JSlider();
        panelColor2 = new javax.swing.JPanel();
        sliderLookupOpPropio = new javax.swing.JSlider();
        sliderOperadorOpPropia = new javax.swing.JSlider();
        PanelDividido = new javax.swing.JSplitPane();
        PanelDerecho = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaFiguras = new javax.swing.JList<>();
        VolcadoButton = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        BarraOpciones = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        Nuevo_Menu = new javax.swing.JMenuItem();
        Abrir_Menu = new javax.swing.JMenuItem();
        Guardar_Menu = new javax.swing.JMenuItem();
        Ayuda = new javax.swing.JMenu();
        Acercade = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BarraHerramientas.setRollover(true);

        Nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        Nuevo.setToolTipText("Nueva Imagen");
        Nuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Nuevo.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Nuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Nuevo.setMaximumSize(new java.awt.Dimension(34, 34));
        Nuevo.setMinimumSize(new java.awt.Dimension(34, 34));
        Nuevo.setPreferredSize(new java.awt.Dimension(34, 34));
        Nuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Nuevo);

        Abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        Abrir.setToolTipText("Abrir Archivo");
        Abrir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Abrir.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Abrir.setFocusable(false);
        Abrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Abrir.setMaximumSize(new java.awt.Dimension(34, 34));
        Abrir.setMinimumSize(new java.awt.Dimension(34, 34));
        Abrir.setPreferredSize(new java.awt.Dimension(34, 34));
        Abrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Abrir);

        Guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        Guardar.setToolTipText("Guardar Imagen");
        Guardar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Guardar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Guardar.setFocusable(false);
        Guardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Guardar.setMaximumSize(new java.awt.Dimension(34, 34));
        Guardar.setMinimumSize(new java.awt.Dimension(34, 34));
        Guardar.setPreferredSize(new java.awt.Dimension(34, 34));
        Guardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Guardar);

        Separador1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Separador1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Separador1.setMaximumSize(new java.awt.Dimension(10, 34));
        Separador1.setMinimumSize(new java.awt.Dimension(10, 34));
        Separador1.setPreferredSize(new java.awt.Dimension(10, 34));
        BarraHerramientas.add(Separador1);

        Herramientas.add(Trazo);
        Trazo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trazo.png"))); // NOI18N
        Trazo.setToolTipText("Trazo Libre");
        Trazo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Trazo.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Trazo.setFocusable(false);
        Trazo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Trazo.setMaximumSize(new java.awt.Dimension(34, 34));
        Trazo.setMinimumSize(new java.awt.Dimension(34, 34));
        Trazo.setPreferredSize(new java.awt.Dimension(34, 34));
        Trazo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Trazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrazoActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Trazo);

        Herramientas.add(Linea);
        Linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        Linea.setToolTipText("Línea recta");
        Linea.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Linea.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Linea.setFocusable(false);
        Linea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Linea.setMaximumSize(new java.awt.Dimension(34, 34));
        Linea.setMinimumSize(new java.awt.Dimension(34, 34));
        Linea.setPreferredSize(new java.awt.Dimension(34, 34));
        Linea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineaActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Linea);

        Herramientas.add(Rectangulo);
        Rectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        Rectangulo.setToolTipText("Rectángulo");
        Rectangulo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Rectangulo.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Rectangulo.setFocusable(false);
        Rectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Rectangulo.setMaximumSize(new java.awt.Dimension(34, 34));
        Rectangulo.setMinimumSize(new java.awt.Dimension(34, 34));
        Rectangulo.setPreferredSize(new java.awt.Dimension(34, 34));
        Rectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Rectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectanguloActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Rectangulo);

        Herramientas.add(Elipse);
        Elipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        Elipse.setToolTipText("Elipse");
        Elipse.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Elipse.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Elipse.setFocusable(false);
        Elipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Elipse.setMaximumSize(new java.awt.Dimension(34, 34));
        Elipse.setMinimumSize(new java.awt.Dimension(34, 34));
        Elipse.setPreferredSize(new java.awt.Dimension(34, 34));
        Elipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Elipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElipseActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Elipse);

        Herramientas.add(Curva);
        Curva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/curva.png"))); // NOI18N
        Curva.setToolTipText("Curva con un punto de control");
        Curva.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Curva.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Curva.setFocusable(false);
        Curva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Curva.setMaximumSize(new java.awt.Dimension(34, 34));
        Curva.setMinimumSize(new java.awt.Dimension(34, 34));
        Curva.setPreferredSize(new java.awt.Dimension(34, 34));
        Curva.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Curva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurvaActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Curva);

        Herramientas.add(Smile);
        Smile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/smile.png"))); // NOI18N
        Smile.setToolTipText("Sonrisa");
        Smile.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Smile.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Smile.setFocusable(false);
        Smile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Smile.setMaximumSize(new java.awt.Dimension(34, 34));
        Smile.setMinimumSize(new java.awt.Dimension(34, 34));
        Smile.setPreferredSize(new java.awt.Dimension(34, 34));
        Smile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Smile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmileActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Smile);

        Herramientas.add(Mover);
        Mover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        Mover.setToolTipText("Mover");
        Mover.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Mover.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Mover.setFocusable(false);
        Mover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Mover.setMaximumSize(new java.awt.Dimension(34, 34));
        Mover.setMinimumSize(new java.awt.Dimension(34, 34));
        Mover.setPreferredSize(new java.awt.Dimension(34, 34));
        Mover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Mover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoverActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Mover);

        Separador3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Separador3.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Separador3.setMaximumSize(new java.awt.Dimension(10, 34));
        Separador3.setMinimumSize(new java.awt.Dimension(10, 34));
        Separador3.setPreferredSize(new java.awt.Dimension(10, 34));
        BarraHerramientas.add(Separador3);

        PanelColores.setMaximumSize(new java.awt.Dimension(54, 38));
        PanelColores.setMinimumSize(new java.awt.Dimension(54, 34));
        PanelColores.setPreferredSize(new java.awt.Dimension(54, 38));
        PanelColores.setRequestFocusEnabled(false);

        Negro.setBackground(new java.awt.Color(0, 0, 0));
        Negro.setToolTipText("Negro");
        Negro.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Negro.setMaximumSize(new java.awt.Dimension(12, 12));
        Negro.setMinimumSize(new java.awt.Dimension(12, 12));
        Negro.setName(""); // NOI18N
        Negro.setPreferredSize(new java.awt.Dimension(12, 12));
        Negro.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Negro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegroActionPerformed(evt);
            }
        });
        PanelColores.add(Negro);

        Rojo.setBackground(new java.awt.Color(255, 0, 0));
        Rojo.setToolTipText("Rojo");
        Rojo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Rojo.setMaximumSize(new java.awt.Dimension(12, 12));
        Rojo.setMinimumSize(new java.awt.Dimension(12, 12));
        Rojo.setName(""); // NOI18N
        Rojo.setPreferredSize(new java.awt.Dimension(12, 12));
        Rojo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Rojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RojoActionPerformed(evt);
            }
        });
        PanelColores.add(Rojo);

        Amarillo.setBackground(new java.awt.Color(255, 255, 0));
        Amarillo.setToolTipText("Amarillo");
        Amarillo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Amarillo.setMaximumSize(new java.awt.Dimension(12, 12));
        Amarillo.setMinimumSize(new java.awt.Dimension(12, 12));
        Amarillo.setName(""); // NOI18N
        Amarillo.setPreferredSize(new java.awt.Dimension(12, 12));
        Amarillo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Amarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AmarilloActionPerformed(evt);
            }
        });
        PanelColores.add(Amarillo);

        Verde.setBackground(new java.awt.Color(0, 255, 0));
        Verde.setToolTipText("Verde");
        Verde.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Verde.setMaximumSize(new java.awt.Dimension(12, 12));
        Verde.setMinimumSize(new java.awt.Dimension(12, 12));
        Verde.setName(""); // NOI18N
        Verde.setPreferredSize(new java.awt.Dimension(12, 12));
        Verde.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Verde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerdeActionPerformed(evt);
            }
        });
        PanelColores.add(Verde);

        Azul.setBackground(new java.awt.Color(0, 0, 255));
        Azul.setToolTipText("Azul");
        Azul.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Azul.setMaximumSize(new java.awt.Dimension(12, 12));
        Azul.setMinimumSize(new java.awt.Dimension(12, 12));
        Azul.setName(""); // NOI18N
        Azul.setPreferredSize(new java.awt.Dimension(12, 12));
        Azul.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Azul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AzulActionPerformed(evt);
            }
        });
        PanelColores.add(Azul);

        EligeColor.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        EligeColor.setText("+");
        EligeColor.setToolTipText("Seleccionar Color");
        EligeColor.setAlignmentY(0.0F);
        EligeColor.setBorder(null);
        EligeColor.setBorderPainted(false);
        EligeColor.setContentAreaFilled(false);
        EligeColor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        EligeColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EligeColor.setIconTextGap(0);
        EligeColor.setMargin(new java.awt.Insets(0, 0, 0, 0));
        EligeColor.setMinimumSize(new java.awt.Dimension(12, 12));
        EligeColor.setName("+"); // NOI18N
        EligeColor.setOpaque(true);
        EligeColor.setPreferredSize(new java.awt.Dimension(12, 12));
        EligeColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EligeColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EligeColorActionPerformed(evt);
            }
        });
        PanelColores.add(EligeColor);

        BarraHerramientas.add(PanelColores);

        Separador2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Separador2.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Separador2.setMaximumSize(new java.awt.Dimension(10, 34));
        Separador2.setMinimumSize(new java.awt.Dimension(10, 34));
        Separador2.setPreferredSize(new java.awt.Dimension(10, 34));
        BarraHerramientas.add(Separador2);

        Rellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        Rellenar.setToolTipText("Rellenar");
        Rellenar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Rellenar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Rellenar.setFocusable(false);
        Rellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Rellenar.setMaximumSize(new java.awt.Dimension(34, 34));
        Rellenar.setMinimumSize(new java.awt.Dimension(34, 34));
        Rellenar.setPreferredSize(new java.awt.Dimension(34, 34));
        Rellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Rellenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RellenarActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Rellenar);

        Transparente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        Transparente.setToolTipText("Transparencia");
        Transparente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Transparente.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Transparente.setFocusable(false);
        Transparente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Transparente.setMaximumSize(new java.awt.Dimension(34, 34));
        Transparente.setMinimumSize(new java.awt.Dimension(34, 34));
        Transparente.setPreferredSize(new java.awt.Dimension(34, 34));
        Transparente.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Transparente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransparenteActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Transparente);

        Alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        Alisar.setToolTipText("Alisado de bordes");
        Alisar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Alisar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Alisar.setFocusable(false);
        Alisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Alisar.setMaximumSize(new java.awt.Dimension(34, 34));
        Alisar.setMinimumSize(new java.awt.Dimension(34, 34));
        Alisar.setPreferredSize(new java.awt.Dimension(34, 34));
        Alisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Alisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlisarActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Alisar);

        valor_grosor.setToolTipText("Grosor del trazo");
        valor_grosor.setMaximumSize(new java.awt.Dimension(40, 34));
        valor_grosor.setMinimumSize(new java.awt.Dimension(40, 34));
        valor_grosor.setPreferredSize(new java.awt.Dimension(40, 34));
        valor_grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valor_grosorStateChanged(evt);
            }
        });
        BarraHerramientas.add(valor_grosor);

        Discontinua.setText("Discontinua");
        Discontinua.setToolTipText("Linea Continua/Discontinua");
        Discontinua.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Discontinua.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Discontinua.setFocusable(false);
        Discontinua.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Discontinua.setMaximumSize(new java.awt.Dimension(34, 34));
        Discontinua.setMinimumSize(new java.awt.Dimension(34, 34));
        Discontinua.setPreferredSize(new java.awt.Dimension(75, 34));
        Discontinua.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Discontinua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscontinuaActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Discontinua);

        botonWebcam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        botonWebcam.setToolTipText("Webcam");
        botonWebcam.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        botonWebcam.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        botonWebcam.setFocusable(false);
        botonWebcam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonWebcam.setMaximumSize(new java.awt.Dimension(34, 34));
        botonWebcam.setMinimumSize(new java.awt.Dimension(34, 34));
        botonWebcam.setPreferredSize(new java.awt.Dimension(34, 34));
        botonWebcam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonWebcam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonWebcamActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonWebcam);

        botonCaptura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        botonCaptura.setToolTipText("Capturar instantánea");
        botonCaptura.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        botonCaptura.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        botonCaptura.setFocusable(false);
        botonCaptura.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCaptura.setMaximumSize(new java.awt.Dimension(34, 34));
        botonCaptura.setMinimumSize(new java.awt.Dimension(34, 34));
        botonCaptura.setPreferredSize(new java.awt.Dimension(34, 34));
        botonCaptura.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCaptura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapturaActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonCaptura);

        Play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png"))); // NOI18N
        Play.setToolTipText("Play");
        Play.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Play.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Play.setFocusable(false);
        Play.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Play.setMaximumSize(new java.awt.Dimension(34, 34));
        Play.setMinimumSize(new java.awt.Dimension(34, 34));
        Play.setPreferredSize(new java.awt.Dimension(34, 34));
        Play.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Play);

        Stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop24x24.png"))); // NOI18N
        Stop.setToolTipText("Stop");
        Stop.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Stop.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Stop.setFocusable(false);
        Stop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Stop.setMaximumSize(new java.awt.Dimension(34, 34));
        Stop.setMinimumSize(new java.awt.Dimension(34, 34));
        Stop.setPreferredSize(new java.awt.Dimension(34, 34));
        Stop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Stop);

        Rec.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        Rec.setToolTipText("Rec");
        Rec.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Rec.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Rec.setFocusable(false);
        Rec.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Rec.setMaximumSize(new java.awt.Dimension(34, 34));
        Rec.setMinimumSize(new java.awt.Dimension(34, 34));
        Rec.setPreferredSize(new java.awt.Dimension(34, 34));
        Rec.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Rec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecActionPerformed(evt);
            }
        });
        BarraHerramientas.add(Rec);

        listaReproduccion.setMaximumRowCount(8);
        listaReproduccion.setToolTipText("Seleccionar Audio");
        BarraHerramientas.add(listaReproduccion);

        getContentPane().add(BarraHerramientas, java.awt.BorderLayout.PAGE_START);

        BarraInferior.setLayout(new java.awt.BorderLayout());

        BarraEstado.setText("Barra de estado");
        BarraInferior.add(BarraEstado, java.awt.BorderLayout.CENTER);

        panelImagenOp.setPreferredSize(new java.awt.Dimension(1100, 170));
        panelImagenOp.setRequestFocusEnabled(false);

        panelDuplicado.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Duplicado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelDuplicado.setToolTipText("Duplicado");
        panelDuplicado.setMaximumSize(new java.awt.Dimension(82, 43));
        panelDuplicado.setName("Brillo"); // NOI18N
        panelDuplicado.setPreferredSize(new java.awt.Dimension(100, 63));
        panelDuplicado.setRequestFocusEnabled(false);
        panelDuplicado.setLayout(new java.awt.BorderLayout());

        Duplicado.setText("DUP");
        Duplicado.setToolTipText("Duplicado");
        Duplicado.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Duplicado.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Duplicado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Duplicado.setMaximumSize(new java.awt.Dimension(60, 34));
        Duplicado.setMinimumSize(new java.awt.Dimension(34, 34));
        Duplicado.setPreferredSize(new java.awt.Dimension(55, 34));
        Duplicado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Duplicado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DuplicadoActionPerformed(evt);
            }
        });
        panelDuplicado.add(Duplicado, java.awt.BorderLayout.CENTER);
        Duplicado.getAccessibleContext().setAccessibleName("Duplicado");

        panelImagenOp.add(panelDuplicado);

        panelBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Brillo y contraste", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelBrillo.setToolTipText("Brillo");
        panelBrillo.setMaximumSize(new java.awt.Dimension(82, 43));
        panelBrillo.setName("Brillo"); // NOI18N
        panelBrillo.setLayout(new java.awt.BorderLayout());

        sliderBrillo.setMaximum(255);
        sliderBrillo.setMinimum(-255);
        sliderBrillo.setToolTipText("Brillo");
        sliderBrillo.setValue(0);
        sliderBrillo.setMaximumSize(new java.awt.Dimension(36, 20));
        sliderBrillo.setPreferredSize(new java.awt.Dimension(100, 20));
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        panelBrillo.add(sliderBrillo, java.awt.BorderLayout.CENTER);

        sliderContraste.setMaximum(20);
        sliderContraste.setToolTipText("Contraste");
        sliderContraste.setValue(10);
        sliderContraste.setMaximumSize(new java.awt.Dimension(36, 20));
        sliderContraste.setPreferredSize(new java.awt.Dimension(100, 20));
        sliderContraste.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderContrasteStateChanged(evt);
            }
        });
        sliderContraste.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderContrasteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderContrasteFocusLost(evt);
            }
        });
        panelBrillo.add(sliderContraste, java.awt.BorderLayout.LINE_END);

        panelImagenOp.add(panelBrillo);

        panelFiltros.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelFiltros.setToolTipText("Filtro");
        panelFiltros.setLayout(new java.awt.GridLayout(1, 0));

        seleccionMascara.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano", "Horizontal 5x1", "Horizontal 7x1", "Horizontal 10x1" }));
        seleccionMascara.setToolTipText("Filtros");
        seleccionMascara.setName("Filtro"); // NOI18N
        seleccionMascara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionMascaraActionPerformed(evt);
            }
        });
        panelFiltros.add(seleccionMascara);

        panelImagenOp.add(panelFiltros);

        panelTransformaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transformaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelTransformaciones.setToolTipText("Filtro");
        panelTransformaciones.setLayout(new javax.swing.BoxLayout(panelTransformaciones, javax.swing.BoxLayout.LINE_AXIS));

        ContrasteNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        ContrasteNormal.setToolTipText("Contraste");
        ContrasteNormal.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ContrasteNormal.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        ContrasteNormal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ContrasteNormal.setMaximumSize(new java.awt.Dimension(34, 34));
        ContrasteNormal.setMinimumSize(new java.awt.Dimension(34, 34));
        ContrasteNormal.setPreferredSize(new java.awt.Dimension(34, 34));
        ContrasteNormal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ContrasteNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContrasteNormalActionPerformed(evt);
            }
        });
        panelTransformaciones.add(ContrasteNormal);

        ContrasteIIluminacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        ContrasteIIluminacion.setToolTipText("Iluminar");
        ContrasteIIluminacion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ContrasteIIluminacion.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        ContrasteIIluminacion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ContrasteIIluminacion.setMaximumSize(new java.awt.Dimension(34, 34));
        ContrasteIIluminacion.setMinimumSize(new java.awt.Dimension(34, 34));
        ContrasteIIluminacion.setPreferredSize(new java.awt.Dimension(34, 34));
        ContrasteIIluminacion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ContrasteIIluminacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContrasteIIluminacionActionPerformed(evt);
            }
        });
        panelTransformaciones.add(ContrasteIIluminacion);

        ContrasteOscuro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        ContrasteOscuro.setToolTipText("Oscurecer");
        ContrasteOscuro.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ContrasteOscuro.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        ContrasteOscuro.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ContrasteOscuro.setMaximumSize(new java.awt.Dimension(34, 34));
        ContrasteOscuro.setMinimumSize(new java.awt.Dimension(34, 34));
        ContrasteOscuro.setPreferredSize(new java.awt.Dimension(34, 34));
        ContrasteOscuro.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ContrasteOscuro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContrasteOscuroActionPerformed(evt);
            }
        });
        panelTransformaciones.add(ContrasteOscuro);

        Negativo.setText("NEG");
        Negativo.setToolTipText("Negativa");
        Negativo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Negativo.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Negativo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Negativo.setMaximumSize(new java.awt.Dimension(60, 34));
        Negativo.setMinimumSize(new java.awt.Dimension(34, 34));
        Negativo.setPreferredSize(new java.awt.Dimension(55, 34));
        Negativo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Negativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativoActionPerformed(evt);
            }
        });
        panelTransformaciones.add(Negativo);
        Negativo.getAccessibleContext().setAccessibleDescription("Negativo");

        Cuadratica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cuadratica.png"))); // NOI18N
        Cuadratica.setToolTipText("Cuadratica");
        Cuadratica.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Cuadratica.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Cuadratica.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Cuadratica.setMaximumSize(new java.awt.Dimension(34, 34));
        Cuadratica.setMinimumSize(new java.awt.Dimension(34, 34));
        Cuadratica.setPreferredSize(new java.awt.Dimension(34, 34));
        Cuadratica.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Cuadratica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CuadraticaActionPerformed(evt);
            }
        });
        panelTransformaciones.add(Cuadratica);

        Lineal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/lineal.png"))); // NOI18N
        Lineal.setToolTipText("Lineal");
        Lineal.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Lineal.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Lineal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Lineal.setMaximumSize(new java.awt.Dimension(34, 34));
        Lineal.setMinimumSize(new java.awt.Dimension(34, 34));
        Lineal.setPreferredSize(new java.awt.Dimension(34, 34));
        Lineal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Lineal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LinealActionPerformed(evt);
            }
        });
        panelTransformaciones.add(Lineal);

        abValores.setLayout(new java.awt.BorderLayout());

        aValor.setMaximum(255);
        aValor.setToolTipText("Valor A");
        aValor.setValue(128);
        aValor.setEnabled(false);
        aValor.setPreferredSize(new java.awt.Dimension(100, 20));
        aValor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                aValorStateChanged(evt);
            }
        });
        aValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aValorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                aValorFocusLost(evt);
            }
        });
        abValores.add(aValor, java.awt.BorderLayout.CENTER);

        bValor.setMaximum(255);
        bValor.setToolTipText("Valor B");
        bValor.setValue(128);
        bValor.setEnabled(false);
        bValor.setPreferredSize(new java.awt.Dimension(100, 20));
        bValor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bValorStateChanged(evt);
            }
        });
        bValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bValorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bValorFocusLost(evt);
            }
        });
        abValores.add(bValor, java.awt.BorderLayout.PAGE_END);
        bValor.getAccessibleContext().setAccessibleName("");
        bValor.getAccessibleContext().setAccessibleDescription("");

        panelTransformaciones.add(abValores);

        panelImagenOp.add(panelTransformaciones);

        panelRotacionEscalado.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transformaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelRotacionEscalado.setToolTipText("Filtro");
        panelRotacionEscalado.setLayout(new javax.swing.BoxLayout(panelRotacionEscalado, javax.swing.BoxLayout.LINE_AXIS));

        Rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        Rotacion180.setToolTipText("Rotacion 180º");
        Rotacion180.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Rotacion180.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Rotacion180.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Rotacion180.setMaximumSize(new java.awt.Dimension(34, 34));
        Rotacion180.setMinimumSize(new java.awt.Dimension(34, 34));
        Rotacion180.setPreferredSize(new java.awt.Dimension(34, 34));
        Rotacion180.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rotacion180ActionPerformed(evt);
            }
        });
        panelRotacionEscalado.add(Rotacion180);

        Aumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        Aumentar.setToolTipText("Aumentar");
        Aumentar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Aumentar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Aumentar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Aumentar.setMaximumSize(new java.awt.Dimension(34, 34));
        Aumentar.setMinimumSize(new java.awt.Dimension(34, 34));
        Aumentar.setPreferredSize(new java.awt.Dimension(34, 34));
        Aumentar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Aumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AumentarActionPerformed(evt);
            }
        });
        panelRotacionEscalado.add(Aumentar);

        Disminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        Disminuir.setToolTipText("Disminuir");
        Disminuir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Disminuir.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Disminuir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Disminuir.setMaximumSize(new java.awt.Dimension(34, 34));
        Disminuir.setMinimumSize(new java.awt.Dimension(34, 34));
        Disminuir.setPreferredSize(new java.awt.Dimension(34, 34));
        Disminuir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Disminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisminuirActionPerformed(evt);
            }
        });
        panelRotacionEscalado.add(Disminuir);

        sliderRotacion.setMaximum(360);
        sliderRotacion.setToolTipText("Rotación");
        sliderRotacion.setValue(0);
        sliderRotacion.setPreferredSize(new java.awt.Dimension(100, 20));
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        panelRotacionEscalado.add(sliderRotacion);

        panelImagenOp.add(panelRotacionEscalado);

        panelColor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Color", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelColor.setToolTipText("Filtro");
        panelColor.setLayout(new javax.swing.BoxLayout(panelColor, javax.swing.BoxLayout.LINE_AXIS));

        ExtraerBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        ExtraerBandas.setToolTipText("Extraer Bandas");
        ExtraerBandas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ExtraerBandas.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        ExtraerBandas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ExtraerBandas.setMaximumSize(new java.awt.Dimension(34, 34));
        ExtraerBandas.setMinimumSize(new java.awt.Dimension(34, 34));
        ExtraerBandas.setPreferredSize(new java.awt.Dimension(34, 34));
        ExtraerBandas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ExtraerBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExtraerBandasActionPerformed(evt);
            }
        });
        panelColor.add(ExtraerBandas);

        seleccionEspaciosColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sRGB", "YCC", "GRAY" }));
        seleccionEspaciosColor.setToolTipText("Filtros");
        seleccionEspaciosColor.setName("Filtro"); // NOI18N
        seleccionEspaciosColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionEspaciosColorActionPerformed(evt);
            }
        });
        panelColor.add(seleccionEspaciosColor);

        panelImagenOp.add(panelColor);

        panelColor1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelColor1.setToolTipText("Filtro");
        panelColor1.setLayout(new javax.swing.BoxLayout(panelColor1, javax.swing.BoxLayout.LINE_AXIS));

        CombinarBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/combinar.png"))); // NOI18N
        CombinarBandas.setToolTipText("Combinar");
        CombinarBandas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CombinarBandas.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        CombinarBandas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CombinarBandas.setMaximumSize(new java.awt.Dimension(34, 34));
        CombinarBandas.setMinimumSize(new java.awt.Dimension(34, 34));
        CombinarBandas.setPreferredSize(new java.awt.Dimension(34, 34));
        CombinarBandas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        CombinarBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CombinarBandasActionPerformed(evt);
            }
        });
        panelColor1.add(CombinarBandas);

        Sepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        Sepia.setToolTipText("Sepia");
        Sepia.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Sepia.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Sepia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Sepia.setMaximumSize(new java.awt.Dimension(34, 34));
        Sepia.setMinimumSize(new java.awt.Dimension(34, 34));
        Sepia.setPreferredSize(new java.awt.Dimension(34, 34));
        Sepia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Sepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SepiaActionPerformed(evt);
            }
        });
        panelColor1.add(Sepia);

        Tintar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        Tintar.setToolTipText("Tintar");
        Tintar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tintar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Tintar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Tintar.setMaximumSize(new java.awt.Dimension(34, 34));
        Tintar.setMinimumSize(new java.awt.Dimension(34, 34));
        Tintar.setPreferredSize(new java.awt.Dimension(34, 34));
        Tintar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Tintar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TintarActionPerformed(evt);
            }
        });
        panelColor1.add(Tintar);

        Ecualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        Ecualizar.setToolTipText("Ecualizar");
        Ecualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Ecualizar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Ecualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Ecualizar.setMaximumSize(new java.awt.Dimension(34, 34));
        Ecualizar.setMinimumSize(new java.awt.Dimension(34, 34));
        Ecualizar.setPreferredSize(new java.awt.Dimension(34, 34));
        Ecualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Ecualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EcualizarActionPerformed(evt);
            }
        });
        panelColor1.add(Ecualizar);

        RojoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rojo.png"))); // NOI18N
        RojoButton.setToolTipText("Resaltado del Rojo");
        RojoButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        RojoButton.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        RojoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RojoButton.setMaximumSize(new java.awt.Dimension(34, 34));
        RojoButton.setMinimumSize(new java.awt.Dimension(34, 34));
        RojoButton.setPreferredSize(new java.awt.Dimension(34, 34));
        RojoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RojoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RojoButtonActionPerformed(evt);
            }
        });
        panelColor1.add(RojoButton);

        sliderPosterize.setMaximum(20);
        sliderPosterize.setMinimum(2);
        sliderPosterize.setToolTipText("Posterizado");
        sliderPosterize.setValue(2);
        sliderPosterize.setPreferredSize(new java.awt.Dimension(100, 20));
        sliderPosterize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPosterizeStateChanged(evt);
            }
        });
        sliderPosterize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderPosterizeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderPosterizeFocusLost(evt);
            }
        });
        panelColor1.add(sliderPosterize);

        sliderTono.setMaximum(360);
        sliderTono.setToolTipText("Cambiar Tono");
        sliderTono.setValue(0);
        sliderTono.setPreferredSize(new java.awt.Dimension(100, 20));
        sliderTono.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTonoStateChanged(evt);
            }
        });
        sliderTono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderTonoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderTonoFocusLost(evt);
            }
        });
        panelColor1.add(sliderTono);

        panelImagenOp.add(panelColor1);

        panelColor2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones Propias", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelColor2.setToolTipText("Filtro");
        panelColor2.setLayout(new javax.swing.BoxLayout(panelColor2, javax.swing.BoxLayout.LINE_AXIS));

        sliderLookupOpPropio.setMaximum(20);
        sliderLookupOpPropio.setMinimum(2);
        sliderLookupOpPropio.setToolTipText("LookupOp Propia");
        sliderLookupOpPropio.setValue(2);
        sliderLookupOpPropio.setPreferredSize(new java.awt.Dimension(100, 20));
        sliderLookupOpPropio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderLookupOpPropioStateChanged(evt);
            }
        });
        sliderLookupOpPropio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderLookupOpPropioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderLookupOpPropioFocusLost(evt);
            }
        });
        panelColor2.add(sliderLookupOpPropio);
        sliderLookupOpPropio.getAccessibleContext().setAccessibleDescription("LookupOP Propia");

        sliderOperadorOpPropia.setMaximum(10);
        sliderOperadorOpPropia.setMinimum(2);
        sliderOperadorOpPropia.setToolTipText("OperadorOp Propia");
        sliderOperadorOpPropia.setValue(2);
        sliderOperadorOpPropia.setPreferredSize(new java.awt.Dimension(100, 20));
        sliderOperadorOpPropia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderOperadorOpPropiaStateChanged(evt);
            }
        });
        sliderOperadorOpPropia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderOperadorOpPropiaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderOperadorOpPropiaFocusLost(evt);
            }
        });
        panelColor2.add(sliderOperadorOpPropia);

        panelImagenOp.add(panelColor2);

        BarraInferior.add(panelImagenOp, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(BarraInferior, java.awt.BorderLayout.PAGE_END);

        PanelDividido.setName(""); // NOI18N
        PanelDividido.setPreferredSize(new java.awt.Dimension(800, 550));

        PanelDerecho.setPreferredSize(new java.awt.Dimension(150, 20));
        PanelDerecho.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ListaFiguras.setToolTipText("Lista Figuras");
        jScrollPane1.setViewportView(ListaFiguras);

        PanelDerecho.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 370, 450));

        VolcadoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/volcar.png"))); // NOI18N
        VolcadoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolcadoButtonActionPerformed(evt);
            }
        });
        PanelDerecho.add(VolcadoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, -1, -1));

        PanelDividido.setRightComponent(PanelDerecho);

        escritorio.setToolTipText("Ventana");
        escritorio.setMaximumSize(new java.awt.Dimension(700, 400));
        escritorio.setMinimumSize(new java.awt.Dimension(700, 400));
        escritorio.setPreferredSize(new java.awt.Dimension(700, 700));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );

        PanelDividido.setLeftComponent(escritorio);

        getContentPane().add(PanelDividido, java.awt.BorderLayout.CENTER);

        Archivo.setText("Archivo");
        Archivo.setToolTipText("");

        Nuevo_Menu.setText("Nuevo");
        Nuevo_Menu.setToolTipText("Nueva Imagen");
        Nuevo_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Nuevo_MenuActionPerformed(evt);
            }
        });
        Archivo.add(Nuevo_Menu);

        Abrir_Menu.setText("Abrir");
        Abrir_Menu.setToolTipText("Abrir Archivo");
        Abrir_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Abrir_MenuActionPerformed(evt);
            }
        });
        Archivo.add(Abrir_Menu);

        Guardar_Menu.setText("Guardar");
        Guardar_Menu.setToolTipText("Guardar Imagen");
        Guardar_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Guardar_MenuActionPerformed(evt);
            }
        });
        Archivo.add(Guardar_Menu);

        BarraOpciones.add(Archivo);

        Ayuda.setText("Ayuda");

        Acercade.setText("Acerca de");
        Acercade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcercadeActionPerformed(evt);
            }
        });
        Ayuda.add(Acercade);

        BarraOpciones.add(Ayuda);

        setJMenuBar(BarraOpciones);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Devuelve el lienzo seleccionado
     *
     * @return
     */
    public Lienzo2D getLienzo2DSeleccionado() {
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        return vi != null ? vi.getLienzo2D() : null;
    }

    /**
     * Crea una nueva Ventana Imagen en blanco de 300x 300
     *
     */
    private void Nuevo_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Nuevo_MenuActionPerformed
        VentanaInternaImagen vi = new VentanaInternaImagen();
        vi.getLienzo2D().addLienzoListener(new ManejadorLienzo());
        vi.addInternalFrameListener(new ManejadorVentanaInternaImagen());
        escritorio.add(vi);
        vi.setTitle("Nuevo");
        vi.setVisible(true);
        BufferedImage img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        vi.getLienzo2D().setArea_clip(new Rectangle2D.Float(0, 0, img.getWidth(), img.getHeight()));
        Graphics2D graphics = img.createGraphics();
        graphics.setColor(Color.WHITE);
        graphics.fillRect(0, 0, 300, 300);
        vi.getLienzo2D().setImagen(img);
    }//GEN-LAST:event_Nuevo_MenuActionPerformed

    /**
     * Crea una nueva Ventana desde un archivo si es una imagen, un video o lo
     * añade a la lista de reproducción si es un archivo de audio.
     *
     */
    private void Abrir_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Abrir_MenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                if (archivoImagen(f)) {
                    BufferedImage img = ImageIO.read(f);
                    VentanaInternaImagen vi = new VentanaInternaImagen();
                    vi.getLienzo2D().addLienzoListener(new ManejadorLienzo());
                    vi.addInternalFrameListener(new ManejadorVentanaInternaImagen());
                    vi.getLienzo2D().setImagen(img);
                    vi.getLienzo2D().setArea_clip(new Rectangle2D.Float(0, 0, img.getWidth(), img.getHeight()));
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                } else if (archivoVideo(f)) {
                    VentanaInternaVideo vv = VentanaInternaVideo.getInstance(f);
                    vv.addMediaPlayerEventListener(new VideoListener());
                    this.escritorio.add(vv);
                    vv.setTitle(f.getName());
                    vv.setVisible(true);
                } else if (archivoSonido(f)) {
                    f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    this.listaReproduccion.addItem(f);
                    this.listaReproduccion.setSelectedItem(f);
                }
            } catch (IOException ex) {
                System.err.println("Error al leer el archivo");
            }
        }
    }//GEN-LAST:event_Abrir_MenuActionPerformed

    /**
     * Guarda la imagen del lienzo en un archivo
     *
     */
    private void Guardar_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Guardar_MenuActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null && vi instanceof VentanaInternaImagen) {
            BufferedImage img = vi.getLienzo2D().getImagen(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (IOException ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_Guardar_MenuActionPerformed

    /**
     * Crea una nueva Ventana Imagen en blanco de 300x 300
     *
     */
    private void NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoActionPerformed
        VentanaInternaImagen vi = new VentanaInternaImagen();
        vi.getLienzo2D().addLienzoListener(new ManejadorLienzo());
        vi.addInternalFrameListener(new ManejadorVentanaInternaImagen());
        escritorio.add(vi);
        vi.setTitle("Nuevo");
        vi.setVisible(true);
        BufferedImage img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        vi.getLienzo2D().setArea_clip(new Rectangle2D.Float(0, 0, img.getWidth(), img.getHeight()));
        Graphics2D graphics = img.createGraphics();
        graphics.setColor(Color.WHITE);
        graphics.fillRect(0, 0, 300, 300);
        vi.getLienzo2D().setImagen(img);
    }//GEN-LAST:event_NuevoActionPerformed

    /**
     * Crea una nueva Ventana desde un archivo si es una imagen, un video o lo
     * añade a la lista de reproducción si es un archivo de audio.
     *
     */
    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                if (archivoImagen(f)) {
                    BufferedImage img = ImageIO.read(f);
                    VentanaInternaImagen vi = new VentanaInternaImagen();
                    vi.getLienzo2D().addLienzoListener(new ManejadorLienzo());
                    vi.addInternalFrameListener(new ManejadorVentanaInternaImagen());
                    vi.getLienzo2D().setImagen(img);
                    vi.getLienzo2D().setArea_clip(new Rectangle2D.Float(0, 0, img.getWidth(), img.getHeight()));
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                } else if (archivoVideo(f)) {
                    VentanaInternaVideo vv = VentanaInternaVideo.getInstance(f);
                    this.escritorio.add(vv);
                    vv.setTitle(f.getName());
                    vv.setVisible(true);
                    vv.addMediaPlayerEventListener(new VideoListener());
                } else if (archivoSonido(f)) {
                    f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    this.listaReproduccion.addItem(f);
                    this.listaReproduccion.setSelectedItem(f);
                }
            } catch (IOException ex) {
                System.err.println("Error al leer el archivo");
            }
        }
    }//GEN-LAST:event_AbrirActionPerformed

    /**
     * Selecciona la heramienta rectangulo
     *
     */
    private void RectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectanguloActionPerformed
        if (this.getLienzo2DSeleccionado() != null) {
            this.getLienzo2DSeleccionado().setHerramienta(Herramienta.RECTANGULO);
            this.BarraEstado.setText("Herramienta Rectangulo");
        }
    }//GEN-LAST:event_RectanguloActionPerformed

    /**
     * Selecciona la heramienta elipse
     *
     */
    private void ElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElipseActionPerformed
        if (this.getLienzo2DSeleccionado() != null) {
            this.getLienzo2DSeleccionado().setHerramienta(Herramienta.ELIPSE);
            this.BarraEstado.setText("Herramienta Elipse");
        }
    }//GEN-LAST:event_ElipseActionPerformed

    /**
     * Selecciona la heramienta curva
     *
     */
    private void CurvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurvaActionPerformed
        if (this.getLienzo2DSeleccionado() != null) {
            this.getLienzo2DSeleccionado().setHerramienta(Herramienta.CURVA);
            this.BarraEstado.setText("Herramienta Curva");
        }
    }//GEN-LAST:event_CurvaActionPerformed

    /**
     * Selecciona la heramienta smile
     *
     */
    private void SmileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmileActionPerformed
        if (this.getLienzo2DSeleccionado() != null) {
            this.getLienzo2DSeleccionado().setHerramienta(Herramienta.SMILE);
            this.BarraEstado.setText("Herramienta Smile");
        }
    }//GEN-LAST:event_SmileActionPerformed

    /**
     * Selecciona la heramienta mover
     *
     */
    private void MoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoverActionPerformed
        if (this.getLienzo2DSeleccionado() != null)
            this.getLienzo2DSeleccionado().setMover(this.Mover.isSelected());
    }//GEN-LAST:event_MoverActionPerformed

    /**
     * Selecciona el color negro
     *
     */
    private void NegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegroActionPerformed
        if (this.getLienzo2DSeleccionado() != null)
            this.getLienzo2DSeleccionado().setColor(Color.BLACK);
    }//GEN-LAST:event_NegroActionPerformed

    /**
     * Selecciona el color rojo
     *
     */
    private void RojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RojoActionPerformed
        if (this.getLienzo2DSeleccionado() != null)
            this.getLienzo2DSeleccionado().setColor(Color.RED);
    }//GEN-LAST:event_RojoActionPerformed

    /**
     * Selecciona el color amarillo
     *
     */
    private void AmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmarilloActionPerformed
        if (this.getLienzo2DSeleccionado() != null)
            this.getLienzo2DSeleccionado().setColor(Color.YELLOW);
    }//GEN-LAST:event_AmarilloActionPerformed

    /**
     * Selecciona el color verde
     *
     */
    private void VerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerdeActionPerformed
        if (this.getLienzo2DSeleccionado() != null)
            this.getLienzo2DSeleccionado().setColor(Color.GREEN);
    }//GEN-LAST:event_VerdeActionPerformed

    /**
     * Selecciona el color azul
     *
     */
    private void AzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AzulActionPerformed
        if (this.getLienzo2DSeleccionado() != null)
            this.getLienzo2DSeleccionado().setColor(Color.BLUE);
    }//GEN-LAST:event_AzulActionPerformed

    /**
     * Abre un dialogo para seleccionar un color diferente a los predeterminados
     *
     */
    private void EligeColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EligeColorActionPerformed
        if (this.getLienzo2DSeleccionado() != null)
            this.getLienzo2DSeleccionado().setColor(JColorChooser.showDialog(this, "Elije un color", Color.RED));
    }//GEN-LAST:event_EligeColorActionPerformed

    /**
     * Habilita el relleno de la figura
     *
     */
    private void RellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RellenarActionPerformed
        if (this.getLienzo2DSeleccionado() != null)
            this.getLienzo2DSeleccionado().setRelleno(this.Rellenar.isSelected());
    }//GEN-LAST:event_RellenarActionPerformed

    /**
     * Habilita la transparencia de la figura
     *
     */
    private void TransparenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransparenteActionPerformed
        if (this.getLienzo2DSeleccionado() != null) {
            if (this.Transparente.isSelected()) {
                this.getLienzo2DSeleccionado().setComp(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
            } else {
                this.getLienzo2DSeleccionado().setComp(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
            }
        }
    }//GEN-LAST:event_TransparenteActionPerformed

    /**
     * Habilita el alisado de la figura
     *
     */
    private void AlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlisarActionPerformed
        if (this.getLienzo2DSeleccionado() != null) {
            if (this.Alisar.isSelected()) {
                this.getLienzo2DSeleccionado().setRender(new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON));
            } else {
                this.getLienzo2DSeleccionado().setRender(new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF));
            }
        }
    }//GEN-LAST:event_AlisarActionPerformed

    /**
     * Cambia el grosor del trazo
     *
     */
    private void valor_grosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valor_grosorStateChanged
        if (this.getLienzo2DSeleccionado() != null)
            this.getLienzo2DSeleccionado().setTrazo((int) valor_grosor.getValue());
    }//GEN-LAST:event_valor_grosorStateChanged

    /**
     * Reproduce el video abierto anteriormente
     *
     */
    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed
        VentanaInternaVideo vv = (VentanaInternaVideo) escritorio.getSelectedFrame();
        if (vv != null) {
            vv.play();
        } else {
            File f = (File) listaReproduccion.getSelectedItem();
            if (f != null) {
                player = new SMClipPlayer(f);
                if (player != null) {
                    player.addLineListener(new ManejadorAudio());
                    player.play();
                }
            }
        }
    }//GEN-LAST:event_PlayActionPerformed

    /**
     * Para el video abierto anteriormente o la grabación de voz
     *
     */
    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        VentanaInternaVideo vv = (VentanaInternaVideo) escritorio.getSelectedFrame();
        if (vv != null) {
            vv.stop();
        } else {
            if (player != null) {
                player.stop();
                player = null;
            }
            if (recorder != null) {
                recorder.stop();
                recorder = null;
            }
        }
    }//GEN-LAST:event_StopActionPerformed

    /**
     * Activa la webcam
     *
     */
    private void botonWebcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonWebcamActionPerformed
        VentanaInternaCamara vc = VentanaInternaCamara.getInstance();
        if (vc != null) {
            escritorio.add(vc);
            vc.setVisible(true);
        }
    }//GEN-LAST:event_botonWebcamActionPerformed

    /**
     * Realiza una captura al video o webcam activa y crea una nueva ventana
     * nueva con ella
     *
     */
    private void botonCapturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapturaActionPerformed
        VentanaInternaSM vsm = (VentanaInternaSM) escritorio.getSelectedFrame();
        if (vsm != null && vsm instanceof VentanaInternaCamara) {
            BufferedImage img = vsm.getImagen();
            if (img != null) {
                VentanaInternaImagen vi = new VentanaInternaImagen();
                vi.getLienzo2D().addLienzoListener(new ManejadorLienzo());
                vi.addInternalFrameListener(new ManejadorVentanaInternaImagen());
                vi.getLienzo2D().setArea_clip(new Rectangle2D.Float(0, 0, img.getWidth(), img.getHeight()));
                vi.getLienzo2D().setImagen(img);
                escritorio.add(vi);
                vi.setTitle("Captura");
                vi.setVisible(true);
            }
        } else if (vsm != null && vsm instanceof VentanaInternaVideo) {
            BufferedImage img = vsm.getImagen();
            if (img != null) {
                VentanaInternaImagen vi = new VentanaInternaImagen();
                vi.getLienzo2D().addLienzoListener(new ManejadorLienzo());
                vi.addInternalFrameListener(new ManejadorVentanaInternaImagen());
                vi.getLienzo2D().setArea_clip(new Rectangle2D.Float(0, 0, img.getWidth(), img.getHeight()));
                vi.getLienzo2D().setImagen(img);
                escritorio.add(vi);
                vi.setTitle("Captura");
                vi.setVisible(true);
            }
        }
    }//GEN-LAST:event_botonCapturaActionPerformed

    /**
     * Inicia la grabación de voz
     *
     */
    private void RecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {
                        return this.getName();
                    }
                };
                recorder = new SMSoundRecorder(f);
                if (recorder != null) {
                    recorder.record();
                    this.listaReproduccion.addItem(f);
                    this.listaReproduccion.setSelectedItem(f);
                }
            } catch (Exception ex) {
                System.err.println("Error al grabar");
            }
        }
    }//GEN-LAST:event_RecActionPerformed

    /**
     * Establece el brillo a la imagen dependiendo del valor del slider
     *
     */
    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    int brillo = this.sliderBrillo.getValue();
                    RescaleOp rop = new RescaleOp(1.0F, brillo, null);
                    rop.filter(imgFuente, img);
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    /**
     * Almacena la imagen original cuando realizamos un cambio de brillo
     *
     */
    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    /**
     * Resetea la imagen original y el slider cuando realizamos un cambio de
     * brillo definitvamente.
     *
     */
    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imgFuente = null;
        this.sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    /**
     * Establece el contraste a la imagen dependiendo del valor del slider
     *
     */
    private void sliderContrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderContrasteStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    int contraste = this.sliderContraste.getValue();
                    RescaleOp rop = new RescaleOp(contraste / 10f, (float) 0.0, null);
                    rop.filter(imgFuente, img);
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderContrasteStateChanged

    /**
     * Almacena la imagen original cuando realizamos un cambio de contraste
     *
     */
    private void sliderContrasteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderContrasteFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(true).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(true).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(true).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderContrasteFocusGained

    /**
     * Resetea la imagen original y el slider cuando realizamos un cambio de
     * contraste definitvamente.
     *
     */
    private void sliderContrasteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderContrasteFocusLost
        imgFuente = null;
        this.sliderContraste.setValue(0);
    }//GEN-LAST:event_sliderContrasteFocusLost

    /**
     * Aplica una mascara seleccionada con la funcion getKernel
     */
    private void seleccionMascaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionMascaraActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            Kernel k = getKernel(this.seleccionMascara.getSelectedIndex());
            if (img != null && k != null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                    BufferedImage imgOut = cop.filter(img, null);
                    vi.getLienzo2D().setImagen(imgOut);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_seleccionMascaraActionPerformed

    /**
     * Aplica un contrate normal
     */
    private void ContrasteNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContrasteNormalActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
        aplicarLookup(tabla);
    }//GEN-LAST:event_ContrasteNormalActionPerformed

    /**
     * Aplica un contrate iluminado
     */
    private void ContrasteIIluminacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContrasteIIluminacionActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_ROOT);
        aplicarLookup(tabla);
    }//GEN-LAST:event_ContrasteIIluminacionActionPerformed

    /**
     * Aplica un contrate oscuro
     */
    private void ContrasteOscuroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContrasteOscuroActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
        aplicarLookup(tabla);
    }//GEN-LAST:event_ContrasteOscuroActionPerformed

    /**
     * Aplica la funcion cuadratica
     */
    private void CuadraticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CuadraticaActionPerformed
        LookupTable tabla = cuadratica(128);
        aplicarLookup(tabla);
    }//GEN-LAST:event_CuadraticaActionPerformed

    /**
     * Almacena la imagen original y habilita los deslizadores
     *
     */
    private void LinealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LinealActionPerformed
        if (!this.aValor.isEnabled() && !this.bValor.isEnabled()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
            if (vi != null) {
                ColorModel cm = vi.getLienzo2D().getImagen(true).getColorModel();
                WritableRaster raster = vi.getLienzo2D().getImagen(true).copyData(null);
                boolean alfaPre = vi.getLienzo2D().getImagen(true).isAlphaPremultiplied();
                imgFuente = new BufferedImage(cm, raster, alfaPre, null);
            }
        } else {
            imgFuente = null;
            this.aValor.setValue(128);
            this.bValor.setValue(128);
        }
        this.aValor.setEnabled(!aValor.isEnabled());
        this.bValor.setEnabled(!bValor.isEnabled());
    }//GEN-LAST:event_LinealActionPerformed

    /**
     * Aplica la función lineal cuando modificamos algun deslizador
     */
    private void aValorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_aValorStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    LookupTable tabla = lineal(this.aValor.getValue(), this.bValor.getValue());
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_aValorStateChanged

    /**
     * Aplica la función lineal cuando modificamos algun deslizador
     */
    private void bValorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bValorStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    LookupTable tabla = lineal(this.aValor.getValue(), this.bValor.getValue());
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bValorStateChanged

    /**
     * Aplica una rotacion de 180 grados
     */
    private void Rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rotacion180ActionPerformed
        aplicarRotacion(180);
    }//GEN-LAST:event_Rotacion180ActionPerformed

    /**
     * Aplica escala de 1.25
     */
    private void AumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AumentarActionPerformed
        aplicarEscala(1.25);
    }//GEN-LAST:event_AumentarActionPerformed

    /**
     * Aplica escala de 0.75
     */
    private void DisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisminuirActionPerformed
        aplicarEscala(0.75);
    }//GEN-LAST:event_DisminuirActionPerformed

    /**
     * Extrae las bandas de la imagen seleccionada
     */
    private void ExtraerBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtraerBandasActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    for (int i = 0; i < img.getRaster().getNumBands(); i++) {
                        BufferedImage imgbanda = getImageBand(img, i);
                        vi = new VentanaInternaImagen();
                        vi.getLienzo2D().setImagen(imgbanda);
                        escritorio.add(vi);
                        vi.setTitle("Banda " + i);
                        vi.setVisible(true);
                    }
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ExtraerBandasActionPerformed

    /**
     * Realiza la conversion entre los espacios de color seleccionados
     */
    private void seleccionEspaciosColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionEspaciosColorActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                ColorSpace cs = null;
                int seleccion = this.seleccionEspaciosColor.getSelectedIndex();

                switch (seleccion) {
                    case 0 ->
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                    case 1 ->
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                    case 2 ->
                        cs = new sm.image.color.GreyColorSpace();
                }
                try {
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi = new VentanaInternaImagen();
                    vi.getLienzo2D().setImagen(imgdest);
                    escritorio.add(vi);
                    vi.setVisible(true);
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_seleccionEspaciosColorActionPerformed

    /**
     * Combina las bandas de la imagen seleccionada
     */
    private void CombinarBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CombinarBandasActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    float[][] matriz = {{0.0F, 0.5F, 0.5F},
                    {0.5F, 0.0F, 0.5F},
                    {0.5F, 0.5F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_CombinarBandasActionPerformed

    /**
     * Aplica un tintado a la imagen con el color seleccionado en la paleta
     */
    private void TintarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TintarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    TintOp tintado = new TintOp(vi.getLienzo2D().getColor(), 0.5f);
                    tintado.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_TintarActionPerformed

    /**
     * Aplica un tintado sepia a la imagen
     */
    private void SepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SepiaActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_SepiaActionPerformed

    /**
     * Aplica una ecualizacion a la imagen
     */
    private void EcualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EcualizarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_EcualizarActionPerformed

    /**
     * Aplica un filtro rojo a la imagen
     */
    private void RojoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RojoButtonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    RojoOp rojoop = new RojoOp(20);
                    rojoop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_RojoButtonActionPerformed

    /**
     * Establece el posterizado a la imagen dependiendo del valor del slider
     *
     */
    private void sliderPosterizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosterizeStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    PosterizarOp op = new PosterizarOp(sliderPosterize.getValue());
                    op.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderPosterizeStateChanged
    /**
     * Almacena la imagen original cuando realizamos un cambio de posterizado
     *
     */
    private void sliderPosterizeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizeFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(true).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(true).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderPosterizeFocusGained

    /**
     * Resetea la imagen original y el slider cuando realizamos un cambio de
     * posterizado definitvamente.
     *
     */
    private void sliderPosterizeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizeFocusLost
        imgFuente = null;
        sliderPosterize.setValue(2);
    }//GEN-LAST:event_sliderPosterizeFocusLost

    /**
     * Establece el tono a la imagen a un color dependiendo del valor del slider
     *
     */
    private void sliderTonoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTonoStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    CambiarTonoOp op = new CambiarTonoOp(sliderTono.getValue());
                    op.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderTonoStateChanged

    /**
     * Guarda la imagen del lienzo en un archivo
     *
     */
    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (IOException ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_GuardarActionPerformed

    /**
     * Selecciona la heramienta trazo
     *
     */
    private void TrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrazoActionPerformed
        if (this.getLienzo2DSeleccionado() != null) {
            this.getLienzo2DSeleccionado().setHerramienta(Herramienta.TRAZO);
            this.BarraEstado.setText("Herramienta Trazo");
        }    }//GEN-LAST:event_TrazoActionPerformed

    /**
     * Resetea la imagen original y el slider cuando realizamos un cambio de
     * tono definitvamente.
     *
     */
    private void sliderTonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTonoFocusLost
        imgFuente = null;
        sliderPosterize.setValue(0);
    }//GEN-LAST:event_sliderTonoFocusLost

    /**
     * Almacena la imagen original cuando realizamos un cambio de tono
     *
     */
    private void sliderTonoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTonoFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderTonoFocusGained

    /**
     * Selecciona la heramienta linea
     *
     */
    private void LineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineaActionPerformed
        if (this.getLienzo2DSeleccionado() != null) {
            this.getLienzo2DSeleccionado().setHerramienta(Herramienta.LINEA);
            this.BarraEstado.setText("Herramienta Linea");
        }
    }//GEN-LAST:event_LineaActionPerformed

    /**
     * Realiza un volcado de figuras seleccionadas a la imagen y las elimina de
     * la lista
     *
     */
    private void VolcadoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolcadoButtonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    List<FormasSM> vvShape = ListaFiguras.getSelectedValuesList();
                    vi.getLienzo2D().volcarFiguras(vvShape);
                    for (FormasSM s : vvShape) {
                        ((DefaultListModel) ListaFiguras.getModel()).removeElement(s);
                    }
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_VolcadoButtonActionPerformed

    /**
     * Muestra un dialogo con la información acerca del trabajo
     *
     */
    private void AcercadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcercadeActionPerformed
        JOptionPane.showMessageDialog(null, """
                                            Pr\u00e1ctica de Evaluaci\u00f3n de Sistemas Multimedia
                                            V1.0 Autor: C\u00e9sar Mu\u00f1oz Reinoso""");
    }//GEN-LAST:event_AcercadeActionPerformed

    /**
     * Establece la discontinuidad
     *
     */
    private void DiscontinuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscontinuaActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        vi.getLienzo2D().setDiscontinua(Discontinua.isSelected());
      }//GEN-LAST:event_DiscontinuaActionPerformed

    /**
     * Establece la rotación a la imagen dependiendo del valor del slider
     *
     */
    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    double r = Math.toRadians(sliderRotacion.getValue());
                    Point p = new Point(img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgFuente, img);
                    vi.getLienzo2D().setImagen(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_sliderRotacionStateChanged

    /**
     * Resetea la imagen original y el slider cuando realizamos una rotación
     * definitvamente.
     *
     */
    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imgFuente = null;
        sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    /**
     * Almacena la imagen original cuando realizamos una rotación
     *
     */
    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    /**
     * Aplica la función negativo
     */
    private void NegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativoActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
        aplicarLookup(tabla);
    }//GEN-LAST:event_NegativoActionPerformed
    /**
     * Crea una nueva ventana, duplicando la imagen
     */
    private void DuplicadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DuplicadoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    VentanaInternaImagen vicopia = new VentanaInternaImagen(img);
                    vicopia.getLienzo2D().addLienzoListener(new ManejadorLienzo());
                    vicopia.addInternalFrameListener(new ManejadorVentanaInternaImagen());
                    vicopia.getLienzo2D().setArea_clip(new Rectangle2D.Float(0, 0, img.getWidth(), img.getHeight()));
                    this.escritorio.add(vicopia);
                    vicopia.setTitle(vi.getTitle() + " Copia");
                    vicopia.setVisible(true);
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_DuplicadoActionPerformed

    /**
     * Almacena la imagen original cuando realizamos el Lookup propio
     *
     */
    private void sliderLookupOpPropioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderLookupOpPropioFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderLookupOpPropioFocusGained

    /**
     * Resetea la imagen original y el slider cuando realizamos el Lookup propio
     * definitivo
     *
     */
    private void sliderLookupOpPropioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderLookupOpPropioFocusLost
        imgFuente = null;
        sliderLookupOpPropio.setValue(0);
    }//GEN-LAST:event_sliderLookupOpPropioFocusLost

    /**
     * Aplica la función Operador propia dependiendo del valor del slider
     *
     */
    private void sliderOperadorOpPropiaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderOperadorOpPropiaStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    OperadorOpPropia op = new OperadorOpPropia(sliderOperadorOpPropia.getValue());
                    op.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderOperadorOpPropiaStateChanged

    /**
     * Almacena la imagen original cuando realizamos el Operador propia
     *
     */
    private void sliderOperadorOpPropiaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderOperadorOpPropiaFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderOperadorOpPropiaFocusGained

    /**
     * Resetea la imagen original y el slider cuando realizamos el Operador
     * propio definitivo
     *
     */
    private void sliderOperadorOpPropiaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderOperadorOpPropiaFocusLost
        imgFuente = null;
        sliderOperadorOpPropia.setValue(0);
    }//GEN-LAST:event_sliderOperadorOpPropiaFocusLost

    /**
     * Aplica la función Lookup propia dependiendo del valor del slider
     *
     */
    private void sliderLookupOpPropioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderLookupOpPropioStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null && imgFuente != null) {
                try {
                    LookupTable tabla = LookupOpPropia(sliderLookupOpPropio.getValue());
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderLookupOpPropioStateChanged

    private void aValorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aValorFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(true).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(true).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_aValorFocusGained

    private void aValorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aValorFocusLost
        imgFuente = null;
    }//GEN-LAST:event_aValorFocusLost

    private void bValorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bValorFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImagen(true).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImagen(true).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_bValorFocusGained

    private void bValorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bValorFocusLost
        imgFuente = null;
    }//GEN-LAST:event_bValorFocusLost

    /**
     * Función de la tabla del LookupOp Propio
     *
     * @param p valor del slider
     * @return
     */
    public LookupTable LookupOpPropia(int p) {
        double Max = Math.log(1 + 255f) * Math.atan(255f / p);
        double K = 255.0 / Max;

        byte lt[] = new byte[256];

        for (int l = 0; l < 256; l++) {
            lt[l] = (byte) (K * (Math.log(1 + l) * Math.atan(l / p)));
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    /**
     * Función que aplica el Lookup con una LookupTable como parametro
     *
     * @param tabla
     */
    private void aplicarLookup(LookupTable tabla) {
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }

    /**
     * Función que aplica la rotación de unos grados
     *
     * @param grados
     */
    private void aplicarRotacion(int grados) {
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    double r = Math.toRadians(grados);
                    Point p = new Point(img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImagen(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }

    /**
     * Función que aplica la escala de un coeficiente
     *
     * @param escala
     */
    private void aplicarEscala(double escala) {
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImagen(false);
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(escala, escala);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImagen(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }

    /**
     * Función que devuelve la tabla de una funcion cuadratica
     *
     * @param m
     * @return
     */
    public LookupTable cuadratica(double m) {
        double Max = (m >= 128) ? (1.0 / 100) * (0 - m) * (0 - m) : (1.0 / 100) * (255 - m) * (255 - m);
        double K = 255.0 / Max;
        byte lt[] = new byte[256];
        for (int l = 0; l < 256; l++) {
            lt[l] = (byte) (K * (1.0 / 100) * (l - m) * (l - m));
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    /**
     * Función que devuelve la tabla de una funcion lineal
     *
     * @param a
     * @param b
     * @return
     */
    public LookupTable lineal(double a, double b) {
        double m = (a == 255) ? 0 : (255 - b) / (255 - a);

        double Max_mayor = m * (255 - a) + b;
        double Max_menor = (b / a) * 255;

        double K_mayor = 255.0 / Max_mayor;
        double K_menor = 255.0 / Max_menor;
        byte lt[] = new byte[256];
        for (int l = 0; l < 256; l++) {
            if (l < a) {
                lt[l] = (byte) (K_menor * (b / a * l));
            } else {
                lt[l] = (byte) (K_mayor * (m * (l - a) + b));
            }
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    /**
     * Función que devuelve el kernel de una selección desplegable
     *
     * @param seleccion
     * @return
     */
    private Kernel getKernel(int seleccion) {
        Kernel k = null;
        switch (seleccion) {
            case 0 ->
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
            case 1 ->
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
            case 2 ->
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
            case 3 ->
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
            case 4 ->
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
            case 5 -> {
                float filtro[] = {0.2f, 0.2f, 0.2f, 0.2f, 0.2f};
                k = new Kernel(5, 1, filtro);
            }
            case 6 -> {
                float filtro[] = {0.2f, 0.2f, 0.2f, 0.2f, 0.2f, 0.2f, 0.2f};
                k = new Kernel(7, 1, filtro);
            }
            case 7 -> {
                float filtro[] = {0.2f, 0.2f, 0.2f, 0.2f, 0.2f, 0.2f, 0.2f, 0.2f, 0.2f, 0.2f};
                k = new Kernel(10, 1, filtro);
            }
        }
        return k;
    }

    /**
     * Función que devuelve una banda de una imagen
     *
     * @param img
     * @param banda
     * @return
     */
    private BufferedImage getImageBand(BufferedImage img, int banda) {
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false,
                Transparency.OPAQUE,
                DataBuffer.TYPE_BYTE);
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0,
                img.getWidth(), img.getHeight(), 0, 0, vband);
        return new BufferedImage(cm, bRaster, false, null);
    }

    /**
     * Clase manejadora de Lienzo
     *
     */
    public class ManejadorLienzo extends LienzoAdapter {

        /**
         * Función que notifica cuando se añade una figura al lienzo y la añade
         * a la lista
         *
         * @param evt
         *
         */
        @Override
        public void shapeAdded(LienzoEvent evt) {
            FormasSM s = evt.getForma();
            ((DefaultListModel) ListaFiguras.getModel()).addElement(s);
            System.out.println("Figura " + evt.getForma() + " añadida");
        }
    }

    /**
     * Clase manejadora de Ventana Interna Imagen
     *
     */
    public class ManejadorVentanaInternaImagen extends InternalFrameAdapter {

        /**
         * Actualiza la lista de figuras cuando se selecciona la ventana interna
         *
         * @param evt
         */
        @Override
        public void internalFrameActivated(InternalFrameEvent evt) {
            VentanaInternaImagen vi = (VentanaInternaImagen) evt.getInternalFrame();
            DefaultListModel modelo = new DefaultListModel();
            modelo.addAll(vi.getLienzo2D().getvShape());
            ListaFiguras.setModel(modelo);
        }

        /**
         * Elimina todas las figuras de la lista cuando se cierra la Ventana
         * interna
         *
         * @param evt
         */
        @Override
        public void internalFrameClosing(InternalFrameEvent evt) {
            ((DefaultListModel) ListaFiguras.getModel()).removeAllElements();
        }
    }

    /**
     * Clase manejadora de Audio
     *
     */
    public class ManejadorAudio implements LineListener {

        /**
         * Habilita o deshabilita el boton de play cuando se esta reproduciendo
         * un audio
         *
         */
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                Play.setEnabled(false);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                Play.setEnabled(true);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    }

    /**
     * Clase manejadora de Video
     *
     */
    private class VideoListener extends MediaPlayerEventAdapter {

        /**
         * Habilita o deshabilita el boton de play y stop cuando se esta
         * reproduciendo un video
         *
         */
        @Override
        public void playing(MediaPlayer mediaPlayer) {
            Stop.setEnabled(true);
            Play.setEnabled(false);
        }

        /**
         * Habilita o deshabilita el boton de play y stop cuando se pausa un
         * video
         *
         */
        @Override
        public void paused(MediaPlayer mediaPlayer) {
            Stop.setEnabled(false);
            Play.setEnabled(true);
        }

        /**
         * Habilita o deshabilita el boton de play y stop cuando finaliza un
         * video
         *
         */
        @Override
        public void finished(MediaPlayer mediaPlayer) {
            this.paused(mediaPlayer);
        }
    }

    /**
     * Comprueba si el archivo es una imagen
     *
     * @param f
     */
    private boolean archivoImagen(File f) {
        String tipo_archivos[] = ImageIO.getReaderFileSuffixes();

        for (String tipo_archivo : tipo_archivos) {
            if (f.getName().endsWith(tipo_archivo)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Comprueba si el archivo es una sonido
     *
     * @param f
     */
    private boolean archivoSonido(File f) {
        AudioFileFormat.Type[] tipo_archivos = AudioSystem.getAudioFileTypes();

        for (AudioFileFormat.Type tipo_archivo : tipo_archivos) {
            if (f.getName().endsWith(tipo_archivo.getExtension())) {
                return true;
            }
        }
        return false;
    }

    /**
     * Comprueba si el archivo es un video
     *
     * @param f
     */
    private boolean archivoVideo(File f) {
        String tipo_archivos[] = {".asf", ".avi", "mkv", ".mov", ".mpjpeg", ".mpg", ".mp4", ".wav", ".wmv", "xvid"};

        for (String tipo_archivo : tipo_archivos) {
            if (f.getName().endsWith(tipo_archivo)) {
                return true;
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Abrir;
    private javax.swing.JMenuItem Abrir_Menu;
    private javax.swing.JMenuItem Acercade;
    private javax.swing.JToggleButton Alisar;
    private javax.swing.JButton Amarillo;
    private javax.swing.JMenu Archivo;
    private javax.swing.JButton Aumentar;
    private javax.swing.JMenu Ayuda;
    private javax.swing.JButton Azul;
    private javax.swing.JLabel BarraEstado;
    private javax.swing.JToolBar BarraHerramientas;
    private javax.swing.JPanel BarraInferior;
    private javax.swing.JMenuBar BarraOpciones;
    private javax.swing.JButton CombinarBandas;
    private javax.swing.JButton ContrasteIIluminacion;
    private javax.swing.JButton ContrasteNormal;
    private javax.swing.JButton ContrasteOscuro;
    private javax.swing.JButton Cuadratica;
    private javax.swing.JToggleButton Curva;
    private javax.swing.JToggleButton Discontinua;
    private javax.swing.JButton Disminuir;
    private javax.swing.JButton Duplicado;
    private javax.swing.JButton Ecualizar;
    private javax.swing.JButton EligeColor;
    private javax.swing.JToggleButton Elipse;
    private javax.swing.JButton ExtraerBandas;
    private javax.swing.JButton Guardar;
    private javax.swing.JMenuItem Guardar_Menu;
    private javax.swing.ButtonGroup Herramientas;
    private javax.swing.JToggleButton Linea;
    private javax.swing.JButton Lineal;
    private javax.swing.JList<FormasSM> ListaFiguras;
    private javax.swing.JToggleButton Mover;
    private javax.swing.JButton Negativo;
    private javax.swing.JButton Negro;
    private javax.swing.JButton Nuevo;
    private javax.swing.JMenuItem Nuevo_Menu;
    private javax.swing.JPanel PanelColores;
    private javax.swing.JPanel PanelDerecho;
    private javax.swing.JSplitPane PanelDividido;
    private javax.swing.JButton Play;
    private javax.swing.JButton Rec;
    private javax.swing.JToggleButton Rectangulo;
    private javax.swing.JToggleButton Rellenar;
    private javax.swing.JButton Rojo;
    private javax.swing.JButton RojoButton;
    private javax.swing.JButton Rotacion180;
    private javax.swing.JToolBar.Separator Separador1;
    private javax.swing.JToolBar.Separator Separador2;
    private javax.swing.JToolBar.Separator Separador3;
    private javax.swing.JButton Sepia;
    private javax.swing.JToggleButton Smile;
    private javax.swing.JButton Stop;
    private javax.swing.JButton Tintar;
    private javax.swing.JToggleButton Transparente;
    private javax.swing.JToggleButton Trazo;
    private javax.swing.JButton Verde;
    private javax.swing.JButton VolcadoButton;
    private javax.swing.JSlider aValor;
    private javax.swing.JPanel abValores;
    private javax.swing.JSlider bValor;
    private javax.swing.JButton botonCaptura;
    private javax.swing.JButton botonWebcam;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<File> listaReproduccion;
    private javax.swing.JPanel panelBrillo;
    private javax.swing.JPanel panelColor;
    private javax.swing.JPanel panelColor1;
    private javax.swing.JPanel panelColor2;
    private javax.swing.JPanel panelDuplicado;
    private javax.swing.JPanel panelFiltros;
    private javax.swing.JPanel panelImagenOp;
    private javax.swing.JPanel panelRotacionEscalado;
    private javax.swing.JPanel panelTransformaciones;
    private javax.swing.JComboBox<String> seleccionEspaciosColor;
    private javax.swing.JComboBox<String> seleccionMascara;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderContraste;
    private javax.swing.JSlider sliderLookupOpPropio;
    private javax.swing.JSlider sliderOperadorOpPropia;
    private javax.swing.JSlider sliderPosterize;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderTono;
    private javax.swing.JSpinner valor_grosor;
    // End of variables declaration//GEN-END:variables
}
